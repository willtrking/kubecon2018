// Code generated by protoc-gen-go. DO NOT EDIT.
// source: merchandise.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Product struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto1.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProductRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ProductRequest) Reset()                    { *m = ProductRequest{} }
func (m *ProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*ProductRequest) ProtoMessage()               {}
func (*ProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ProductRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto1.RegisterType((*Product)(nil), "proto.Product")
	proto1.RegisterType((*ProductRequest)(nil), "proto.ProductRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Merchandise service

type MerchandiseClient interface {
	GetProductByID(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error)
}

type merchandiseClient struct {
	cc *grpc.ClientConn
}

func NewMerchandiseClient(cc *grpc.ClientConn) MerchandiseClient {
	return &merchandiseClient{cc}
}

func (c *merchandiseClient) GetProductByID(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/proto.Merchandise/GetProductByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Merchandise service

type MerchandiseServer interface {
	GetProductByID(context.Context, *ProductRequest) (*Product, error)
}

func RegisterMerchandiseServer(s *grpc.Server, srv MerchandiseServer) {
	s.RegisterService(&_Merchandise_serviceDesc, srv)
}

func _Merchandise_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchandiseServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Merchandise/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchandiseServer).GetProductByID(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Merchandise_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Merchandise",
	HandlerType: (*MerchandiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductByID",
			Handler:    _Merchandise_GetProductByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchandise.proto",
}

func init() { proto1.RegisterFile("merchandise.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4d, 0x2d, 0x4a,
	0xce, 0x48, 0xcc, 0x4b, 0xc9, 0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x4a, 0xba, 0x5c, 0xec, 0x01, 0x45, 0xf9, 0x29, 0xa5, 0xc9, 0x25, 0x42, 0x7c, 0x5c, 0x4c,
	0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x42, 0x5c, 0x2c,
	0x79, 0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x60, 0x11, 0x30, 0x5b, 0x49, 0x81, 0x8b, 0x0f, 0xaa, 0x3c,
	0x28, 0xb5, 0xb0, 0x34, 0xb5, 0x18, 0x43, 0x97, 0x91, 0x1b, 0x17, 0xb7, 0x2f, 0xc2, 0x32, 0x21,
	0x73, 0x2e, 0x3e, 0xf7, 0xd4, 0x12, 0xa8, 0x1e, 0xa7, 0x4a, 0x4f, 0x17, 0x21, 0x51, 0x88, 0x03,
	0xf4, 0x50, 0xcd, 0x91, 0xe2, 0x43, 0x15, 0x4e, 0x62, 0x03, 0x73, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0d, 0xc2, 0x17, 0x77, 0xbb, 0x00, 0x00, 0x00,
}
